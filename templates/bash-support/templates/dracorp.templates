ยง =============================================================
ยง  Dracorp
ยง =============================================================

== Dracorp.file header == start, map:cH ==
#!/usr/bin/env bash
#===============================================================================
# NAME
#       |FILENAME| - short_description
#
# SYNOPSIS
#       |FILENAME| options
#
# DESCRIPTION
#       Long_description
#
# OPTIONS
#
# EXAMPLES
#
# REQUIREMENTS
#
# BUGS
#
# NOTES
#
# AUTHOR
#       |AUTHOR| |AUTHORREF| <|EMAIL|>
#
# ORGANIZATION
#       |ORGANIZATION|
#
# DATE
#       $Date$
#
# REVISION
#       $Revision$
#
# ID
#       $Id$
#
#===============================================================================

shopt -s extglob

PROGRAM_NAME='|FILENAME|'
PROGRAM_VERSION='0.1'

PROGRAM_PARAMS=''
PROGRAM_PARAMS_INPUT=("$@")

declare -A PROGRAM_PARAM=( [VERBOSE]=0 )

# log4sh
PROGRAM_LOG_LEVEL=INFO
PROGRAM_LOG_TIMESTAMP=0

# shell-includes::messages
USE_COLOR='y'

<CURSOR>
== Dracorp.file shell_includes == start, map:csi ==
source_shell_includes() { #{{{
    # searching for the lib in PATH env
    if type shell-includes.sh &>/dev/null; then
        . shell-includes.sh
    # searching in ~/lib/sh/shell-includes directory
    elif [ -r ~/lib/sh/shell-includes/shell-includes.sh ]; then
        . ~/lib/sh/shell-includes/shell-includes.sh
    # searching in ~/lib/sh/shell-includes's lidoadm directory
    elif [ -r ~lidoadm/lib/sh/shell-includes/shell-includes.sh ]; then
        . ~lidoadm/lib/sh/shell-includes/shell-includes.sh
    fi
} #}}}
== Dracorp.file log4sh == start, map:cls ==
source_log4sh() { #{{{
    typeset logFile=$1
    if type log4sh.sh &>/dev/null; then
#        echo "searching for the lib in PATH env"
        . log4sh.sh ${logFile:+-f $logFile} -t $PROGRAM_LOG_TIMESTAMP -l $PROGRAM_LOG_LEVEL || { printf '%s\n' "Error during sourcing of ~/lib/log4sh.sh"; exit 1; }
        DEBUG "The library log4sh has been loaded from the PATH"
    elif [ -r ~/lib/sh/log4sh/log4sh.sh ]; then
#        echo "searching in ~/lib/sh/log4sh directory"
        . ~/lib/sh/log4sh/log4sh.sh ${logFile:+-f $logFile} -t $PROGRAM_LOG_TIMESTAMP -l $PROGRAM_LOG_LEVEL || { printf '%s\n' "Error during sourcing of ~/lib/log4sh.sh"; exit 1; }
        DEBUG "The library log4sh has been loaded from ~/lib/sh/log4sh/log4sh.sh"
    elif [ -r ~lidoadm/lib/sh/log4sh/log4sh.sh ]; then
#        echo "searching in ~/lib/sh/log4sh's lidoadm directory"
        . ~lidoadm/lib/sh/log4sh/log4sh.sh ${logFile:+-f $logFile} -t $PROGRAM_LOG_TIMESTAMP -l $PROGRAM_LOG_LEVEL || { printf '%s\n' "Error during sourcing of ~/lib/log4sh.sh"; exit 1; }
        DEBUG "The library log4sh has been loaded from ~lidoadm/lib/sh/log4sh/log4sh.sh"
    else
        : printf '%s\n' "Could not read log4sh.sh library. A workaround will be used." >&2
        if [ "$(type -t command_not_found_handle)" = function ]; then
            command_not_found_handle_previous=$(declare -f command_not_found_handle | tail -n +3 | head -n -1)
            unset -f command_not_found_handle
        fi
        command_not_found_handle() {
            export TEXTDOMAIN=command-not-found
            typeset command
            case $1 in
                INFO|WARN|ERROR)
                    command=$1
                    shift
                    printf '%s\n' "$command - $@"
                    return
                    ;;
                DEBUG)
                    if [ "$PROGRAM_LOG_LEVEL" = 'DEBUG' ]; then
                        command=$1
                        shift
                        printf '%s\n' "$command - $@"
                    fi
                    return
                    ;;
            esac
            if [ -n "$command_not_found_handle_previous" ]; then
                eval "$command_not_found_handle_previous"
                unset command_not_found_handle_previous
            fi
        }
    fi
} #}}}
== ENDTEMPLATE ==
