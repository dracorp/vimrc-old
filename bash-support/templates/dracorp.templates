== Comments.file header == start, map:ch ==
#!/usr/bin/env bash
#===============================================================================
# NAME
#       |FILENAME| - short_description
#
# SYNOPSIS
#       |FILENAME| options
#
# DESCRIPTION
#       Long_description
#
# OPTIONS
#
# EXAMPLES
#
# REQUIREMENTS
#
# BUGS
#
# NOTES
#
# AUTHOR
#       |AUTHOR| |AUTHORREF| <|EMAIL|>
#
# ORGANIZATION
#       |ORGANIZATION|
#
# DATE
#       $Date$
#
# REVISION
#       $Revision$
#
# ID
#       $Id$
#
#===============================================================================

shopt -s extglob

PROGRAM_NAME='|FILENAME|'
PROGRAM_VERSION='0.1'
USE_COLOR='y'
PROGRAM_OPTIONS=''
# check if messages are to be printed using color {{{
unset ALL_OFF BOLD BLUE GREEN RED YELLOW
if [[ -t 2 && ! $USE_COLOR = "n" ]]; then
	# prefer terminal safe colored and bold text when tput is supported
	if tput setaf 0 &>/dev/null; then
		ALL_OFF="$(tput sgr0)"
		BOLD="$(tput bold)"
		BLUE="${BOLD}$(tput setaf 4)"
		GREEN="${BOLD}$(tput setaf 2)"
		RED="${BOLD}$(tput setaf 1)"
		YELLOW="${BOLD}$(tput setaf 3)"
	else
		ALL_OFF="\e[1;0m"
		BOLD="\e[1;1m"
		BLUE="${BOLD}\e[1;34m"
		GREEN="${BOLD}\e[1;32m"
		RED="${BOLD}\e[1;31m"
		YELLOW="${BOLD}\e[1;33m"
	fi
fi
readonly ALL_OFF BOLD BLUE GREEN RED YELLOW
# }}}

set -- $(getopt $PROGRAM_OPTIONS $*)
if [ $# -eq 0 ]; then
    usage
    exit 1
fi

while [[ "$1" != -- ]]; do
    case $1 in
        *)
        usage
        ;;
    esac
    shift
done
shift # remove --
<CURSOR>

== Functions.file == map:sfs ==
help() { #{{{
    local header
    local pre_header=''
    while IFS= read -r line || [ -n "$line" ]; do
        case "$line" in
            '#!'*) # Shebang line
                ;;
            '#='*) # comment from header
                ;;
            ''|'##'*|'#='*|[!#]*) # End of comments
                if [[ $1 =~ ^-?[0-9]+$ ]]; then
                    return ${1:-0}
                else
                    return
                fi
                ;;
            *) # Comment line
                line=${line:2} # Remove comment prefix
                if [[ "$1" = usage ]]; then
                    # print only usage
                    if [[ $pre_header = SYNOPSIS ]]; then
                        return
                    fi
                    if [[ "${line}" =~ ^[A-Z\s]+$ ]]; then
                        header=${line}
                    fi
                    if [[ "$header" = SYNOPSIS ]]; then
                        if [[ "$line" = SYNOPSIS ]]; then
                            printf '%s\n' 'Usage:' >&2
                        else
                            printf '%s\n' "${line}" >&2
                        fi
                    else
                        pre_header=$header
                    fi
                else
                    printf '%s\n' "${line}" >&2
                fi
                ;;
        esac
    done < "$0"
} # end of function help }}}
usage() { #{{{
    help usage
} # end of function usage }}}
msg() { # {{{
	(( QUIET )) && return
	local mesg=$1; shift
	printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&1
} # end of function msg }}}
msg2() { #{{{
	(( QUIET )) && return
	local mesg=$1; shift
	printf "${BLUE}  ->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&1
} # end of function msg2 }}}
warning() { #{{{
	local mesg=$1; shift
	printf "${YELLOW}==> $(gettext "WARNING:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
} # end of warning }}}
error() { #{{{
	local mesg=$1; shift
	printf "${RED}==> $(gettext "ERROR:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
} # end of function error }}}
version() { #{{{
	printf "%s %s\n" "$PROGRAM_NAME" "$PROGRAM_VERSION"
	echo 'Copyright (C) 2015 |AUTHOR| <|EMAIL|>'
} # end of function version }}}
== ENDTEMPLATE ==
